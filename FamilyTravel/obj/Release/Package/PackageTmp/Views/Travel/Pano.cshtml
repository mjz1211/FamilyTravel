
@{ 

    Layout = null;
}

<link href="~/Content/font-awesome.min.css" rel="stylesheet" />
    <style type="text/css">
        * {
            margin: 0;
            padding: 0;
            
        }

        html {
            height: 100%;
        }

        body {
            margin: 0;
            padding: 0;
            background: #000000;
            color: #ffffff;
            font-family: sans-serif;
            font-size: 13px;
            line-height: 20px;
            height: 100%;
            overflow: hidden;
        }

        a {
            color: #fff;
            text-decoration: none;
            border-bottom: 1px dotted #fff;
        }

            a:hover {
                border-bottom: 1px solid #fff;
            }

        p {
            margin-bottom: 1em;
        }

        .hide {
            opacity: 1;
            -webkit-transition: opacity .5s ease-out;
            -moz-transition: opacity .5s ease-out;
            -o-transition: opacity .5s ease-out;
        }

        #title {
            position: absolute;
            top: 20px;
            width: 300px;
            left: 20px;
            background-color: rgba(0,0,0,0.2);
            border-radius: 3px;
            padding: 10px;
            overflow: auto;
        }

        #options {
            position: absolute;
            top: 20px;
            width: 300px;
            right: 20px;
            background-color: rgba(0,0,0,0.2);
            border-radius: 3px;
            padding: 10px;
            overflow: hidden;
        }

        h1 {
            font: 20px Georgia;
            margin: 0 0 1em 0;
        }

        #toggle {
            position: absolute;
            right: 10px;
            top: 10px;
            text-align: right;
        }

        #map {
            width: 300px;
            height: 200px;
            z-index: 100;
            -webkit-box-shadow: 0px 0px 3px 3px rgba( 73, 73, 73, .2 );
            -moz-box-shadow: 0px 0px 3px 3px rgba( 73, 73, 73, .2 );
            -o-box-shadow: 0px 0px 3px 3px rgba( 73, 73, 73, .2 );
            box-shadow: 0px 0px 3px 3px rgba( 73, 73, 73, .2 );
        }

        #pano {
            position: absolute;
            left: 0;
            top: 0;
            right: 0;
            bottom: 0;
        }

        .button {
            font-size: 11px;
        }

        #pano_form button {
            float: left;
        }

        #map_form input {
            background: rgba( 255,255,255,.5 ) url( search.png ) no-repeat 5px 50%;
            padding-left: 25px;
            width: 185px;
            height: 26px;
            border: 1px solid #444;
            margin-top: 2px;
        }

            #map_form input:focus {
                background-color: rgba( 255,255,255,.85 );
                border: 1px solid black;
            }

        #map_form button {
            width: 80px;
            float: right;
        }

        #preloader {
            pointer-events: none;
            width: 306px;
            height: 36px;
            position: absolute;
            left: 50%;
            top: 50%;
            margin-left: -153px;
            margin-top: -18px;
            background-color: rgba(255,255,255,0.8);
            border-radius: 3px;
            -webkit-transition: opacity 1s ease-out;
            -moz-transition: opacity 1s ease-out;
            -o-transition: opacity 1s ease-out;
        }

        #bar {
            pointer-events: none;
            height: 30px;
            position: absolute;
            left: 50%;
            top: 50%;
            margin-left: -150px;
            margin-top: -15px;
            background-color: rgba(0,0,0,0.8);
            border-radius: 3px;
        }

        .block {
            position: relative;
            line-height: 2.5em;
            padding: 0;
            margin: 5px 0 0 0;
            display: block;
        }

        #error, #message {
            line-height: 1.4em;
            margin-bottom: .5em;
        }

        .test {
            position: absolute;
            left: 0;
            top: 0;
            right: 0;
            bottom: 0;
            width: 100%;
            height: 100%;
            background-color: red;
        }

        /*
            Tab css
        */



        .wrap {
            margin: 0 auto;
        }

        ul.tabs {
            width: 300px;
            height: 80px;
            margin: 0 auto;
            list-style: none;
            overflow: hidden;
            padding: 0;
        }

            ul.tabs li {
                float: left;
                width: 100px;
            }

                ul.tabs li span {
                    position: relative;
                    display: block;
                    height: 30px;
                    margin-top: 40px;
                    padding: 10px 0 0 0;
                    font-family: 'Open Sans', sans-serif;
                    font-size: 14px;
                    text-align: center;
                    text-decoration: none;
                    color: #ffffff;
                    background: #6edeef;
                    -webkit-box-shadow: 8px 12px 25px 2px rgba(0, 0, 0, 0.4);
                    -moz-box-shadow: 8px 12px 25px 2px rgba(0, 0, 0, 0.4);
                    box-shadow: 8px 12px 25px 2px rgba(0, 0, 0, 0.4);
                    border: 0px solid #000000;
                    -webkit-transition: padding 0.2s ease, margin 0.2s ease;
                    -moz-transition: padding 0.2s ease, margin 0.2s ease;
                    -o-transition: padding 0.2s ease, margin 0.2s ease;
                    -ms-transition: padding 0.2s ease, margin 0.2s ease;
                    transition: padding 0.2s ease, margin 0.2s ease;
                }

        .tabs li:first-child span {
            z-index: 3;
            -webkit-border-top-left-radius: 8px;
            -moz-border-radius-topleft: 8px;
            border-top-left-radius: 8px;
        }

        .tabs li:nth-child(2) span {
            z-index: 2;
        }

        .tabs li:last-child span {
            z-index: 1;
            -webkit-box-shadow: 2px 8px 25px -2px rgba(0, 0, 0, 0.3);
            -moz-box-shadow: 2px 8px 25px -2px rgba(0, 0, 0, 0.3);
            box-shadow: 2px 8px 25px -2px rgba(0, 0, 0, 0.3);
            -webkit-border-top-right-radius: 8px;
            -moz-border-radius-topright: 8px;
            border-top-right-radius: 8px;
        }

        ul.tabs li span:hover {
            margin: 35px 0 0 0;
            padding: 10px 0 5px 0;
        }

        ul.tabs li span.active {
            margin: 30px 0 0 0;
            padding: 10px 0 10px 0;
            background: #545f60;
            color: #6edeef;
            /*color: #ff6831;*/
            z-index: 4;
            outline: none;
        }

        .group:before,
        .group:after {
            content: " ";
            /* 1 */
            display: table;
            /* 2 */
        }

        .group:after {
            clear: both;
        }

        #content {
            width: 300px;
            height: 240px;
            overflow-y: hidden;
            margin: 0 auto;
            background: #545f60;
            -webkit-box-shadow: 2px 8px 25px -2px rgba(0, 0, 0, 0.3);
            -moz-box-shadow: 2px 8px 25px -2px rgba(0, 0, 0, 0.3);
            box-shadow: 2px 8px 25px -2px rgba(0, 0, 0, 0.3);
            -webkit-border-bottom-right-radius: 8px;
            -webkit-border-bottom-left-radius: 8px;
            -moz-border-radius-bottomright: 8px;
            -moz-border-radius-bottomleft: 8px;
            border-bottom-right-radius: 8px;
            border-bottom-left-radius: 8px;
        }

        p {
            font-family: 'Open Sans', sans-serif;
            padding: 30px 40px;
            color: #ffffff;
            line-height: 26px;
            font-size: 18px;
            margin: 0;
        }
    </style>
    <link href="~/Content/buttons.css" rel="stylesheet" />
<script src="~/Scripts/jquery-1.10.2.min.js"></script>
    <script src="~/Scripts/GSVPano.js"></script>
    <script src="~/Scripts/Three.js"></script>
    <script src="~/Scripts/RequestAnimationFrame.js"></script>
    <script type="text/javascript" src="//maps.google.com/maps/api/js?key=AIzaSyC8evo6K_89ZLTKCq4sJVG-RCQfjIqLa2c&libraries=places"></script>



    <div id="pano"></div>



    <script type="text/javascript">
        $( document ).ready(function() {
            $("#content2").children().hide();
            $("#content3").children().hide();
        });


        function showTab(tabId){
            if(tabId == 'one'){

                $(".tabs li span").removeClass("active");
                $("#content1").children().hide();
                $("#content2").children().hide();
                $("#content3").children().hide();



                $("#tab_one").addClass("active");
                $("#content1").children().fadeIn(500);


            }
            else if(tabId =='two'){
                $(".tabs li span").removeClass("active");
                $("#content1").children().hide();
                $("#content2").children().hide();
                $("#content3").children().hide();
                $("#content2").height(230); // restore the height when press two



                $("#tab_two").addClass("active");
                $("#content2").children().fadeIn(200);

            }
            else if(tabId =='three'){
                $(".tabs li span").removeClass("active");
                $("#content1").children().hide();
                $("#content2").children().hide();
                $("#content3").children().hide();
                $("#content2").height(0);


                $("#tab_three").addClass("active");
                $("#content3").children().fadeIn(200);

            }
        }

        function postTravelAdd(){
            $('#addForm').submit();
        }

        function back(){
            window.location.href = 'ListPlace?lat=@ViewBag.Lat&lng=@ViewBag.Lng';
        }


    </script>

    <div id="options" class="hide">
        <!--

        -->

        <form action="/Travel/Add" method="post" id="addForm">
            <input type="hidden" id="place_id" name="place_id" value="@ViewBag.Place_Id" />
            <input type="hidden" id="address" name="address" value="@ViewBag.Address" />
            <input type="hidden" id="name" name="name" value="@ViewBag.Name" />
            <input type="hidden" id="image" name="image" value="@ViewBag.Image" />
            <input type="hidden" id="distance" name="distance" value="@ViewBag.Distance" />
            <input type="hidden" id="rating" name="rating" value="@ViewBag.Rating" />
            <input type="hidden" id="lat" name="lat" value="@ViewBag.Lat" />
            <input type="hidden" id="lng" name="lng" value="@ViewBag.Lng" />
            <input type="hidden" id="ptype" name="ptype" value="@ViewBag.PType" />           
        </form>
        <button type="submit" style="width: 100px" class="button" onclick="postTravelAdd();"><i class="fa fa-heart" aria-hidden="true"></i>加我的最愛</button>
        <button type="submit" style="width: 100px" class="button" onclick="back();"><i class="fa fa-arrow-left" aria-hidden="true"></i>回上一頁</button>
        <!--button class="primary button" id="HideMap" onclick="hideMap();">HideMap</!--button-->


        <div class="wrap">

            <ul class="tabs group">
                <li><span class="active" id="tab_one" onclick="showTab('one');">MAP</span></li>
                <li><span id="tab_two" onclick="showTab('two');">PHOTO</span></li>
                <li><span id="tab_three" onclick="showTab('three');">COMMENT</span></li>
            </ul>

            <div id="content">
                <div id="content1">
                    <div id="map"></div>
                    <div class="block" id="status">
                        <div id="message"></div>
                        <div id="error"></div>
                    </div>

                </div>
                <div id="content2" style="height:230px;overflow-y:scroll;overflow-x:hidden;"></div>

                <div id="content3" style="height:230px;overflow-y:scroll;"></div>

            </div>

        </div>





    </div>

    <div id="preloader">
        <div id="bar"></div>
    </div>



    <script type="x-shader/x-vertex" id="vs-sphere">

        varying vec2 vUv;

        void main() {

        vUv = vec2( 1. - uv.x, uv.y );
        vec4 mPosition = modelMatrix * vec4( position, 1.0 );
        gl_Position = projectionMatrix * modelViewMatrix * mPosition;

        }

    </script>

    <script type="x-shader/x-fragment" id="fs-sphere">

        uniform sampler2D map;
        varying vec2 vUv;

        void main() {

        gl_FragColor = vec4( texture2D( map, vUv ).rgb, 1. );

        }

    </script>

    <script type="text/javascript">

	'use strict';

		var map, canvas, ctx;
		var marker = null;
		var container, mesh, renderer, camera, scene, material;
		var fov = 70, nFov = 70;
		var oDist = 0, oFov;
		var lat = 0, lon = 0, nLat = 0, nLon = 0;
		var zoom;
		var geocoder;
		var error, errorDiv;
		var message, messageDiv;
		var activeLocation = null;
		var preloader = document.getElementById( 'preloader' );
		var bar = document.getElementById( 'bar' );
		var scaleButtons = [];
		var cd = new Date();
		var time = cd.getTime();
		var position = { x: 0, y: 0 };
		var loader = new GSVPANO.PanoLoader();

		function setProgress( progress ) {
			bar.style.width = ( preloader.clientWidth - 6 ) * progress / 100 + 'px';
		}

		function showProgress( show ) {
			preloader.style.opacity = ( show == true )?1:0;
			preloader.style.display = ( show == true )?'block':'none';
		}

		function setZoom( z ) {
			zoom = z;
			loader.setZoom( z );
			for( var j = 0; j < scaleButtons.length; j++ ) {
				scaleButtons[ j ].className = scaleButtons[ j ].className.replace( 'active', '' );
				if( z == ( j + 1 ) ) scaleButtons[ j ].className += ' active';
			}
			if( activeLocation ) loader.load( activeLocation );
		}

		function geoSuccess( position ) {

			var currentLocation = new google.maps.LatLng( position.coords.latitude, position.coords.longitude );
			map.panTo( currentLocation );
			addMarker( currentLocation ); // move to position (thanks theCole!)

		}

		function geoError( message ) {
			showError( message );
		}

		function initialize() {

		    var locations = [
                @{
                    if (ViewBag.Lat != null && ViewBag.Lng != null) {
                        <text>
                				{ lat: @ViewBag.Lat , lng: @ViewBag.Lng },

                        </text>
                    }
                }

			];

			var pos;
			if( window.location.hash ) {
				parts = window.location.hash.substr( 1 ).split( ',' );
				pos = { lat: parts[ 0 ], lng: parts[ 1 ] };
			} else {
				pos = locations[ Math.floor( Math.random() * locations.length ) ];
			}
			var myLatlng = new google.maps.LatLng( pos.lat, pos.lng );

			var links = document.querySelectorAll( 'a[rel=external]' );
			for( var j = 0; j < links.length; j++ ) {
				var a = links[ j ];
				a.addEventListener( 'click', function( e ) {
					window.open( this.href, '_blank' );
					e.preventDefault();
				}, false );
			}


			canvas = document.createElement( 'canvas' );
			ctx = canvas.getContext( '2d' );

			container = document.getElementById( 'pano' );

			camera = new THREE.PerspectiveCamera( fov, window.innerWidth / window.innerHeight, 1, 1100 );
			camera.target = new THREE.Vector3( 0, 0, 0 );

			scene = new THREE.Scene();
			scene.add( camera );

			try {
				var isWebGL = !!window.WebGLRenderingContext && !!document.createElement('canvas').getContext('experimental-webgl');
			}catch(e){

			}

			renderer = new THREE.WebGLRenderer();
			renderer.autoClearColor = false;
			renderer.setSize( window.innerWidth, window.innerHeight );

			//material = new THREE.MeshBasicMaterial( { map: THREE.ImageUtils.loadTexture( 'placeholder.jpg' ), side: THREE.DoubleSide } )

			material = new THREE.ShaderMaterial( {

				uniforms: {
					map: { type: "t", value: THREE.ImageUtils.loadTexture( 'placeholder.jpg' ) },
				},
				vertexShader: document.getElementById( 'vs-sphere' ).textContent,
				fragmentShader: document.getElementById( 'fs-sphere' ).textContent,
				side: THREE.DoubleSide

			} );

 			var faces = 50;
			mesh = new THREE.Mesh( new THREE.SphereGeometry( 500, 60, 40 ), material );
			scene.add( mesh );

			container.appendChild( renderer.domElement );

			var myOptions = {
				zoom: 14,
				center: myLatlng,
				mapTypeId: google.maps.MapTypeId.ROADMAP,
				streetViewControl: false
			}
			map = new google.maps.Map(document.getElementById("map"), myOptions);
			google.maps.event.addListener(map, 'click', function(event) {
				addMarker(event.latLng);
			});

			geocoder = new google.maps.Geocoder();

			container.addEventListener( 'mousedown', onContainerMouseDown, false );
			container.addEventListener( 'mousemove', onContainerMouseMove, false );
			container.addEventListener( 'mouseup', onContainerMouseUp, false );

			container.addEventListener( 'touchstart', onTouchStart, false );
			container.addEventListener( 'touchmove', onTouchMove, false );
			container.addEventListener( 'touchend', onTouchEnd, false );
			container.addEventListener( 'touchcancel', onTouchEnd, false );

			container.addEventListener( 'mousewheel', onContainerMouseWheel, false );
			container.addEventListener( 'DOMMouseScroll', onContainerMouseWheel, false);

			window.addEventListener( 'resize', onWindowResized, false );

			onWindowResized( null );


			errorDiv = document.getElementById( 'error' );
			messageDiv = document.getElementById( 'message' );

			showMessage( 'Ready. <b>Click a street in the map.</b>' );

			loader.onProgress = function( p ) {
				setProgress( p );
			};

			loader.onPanoramaData = function( result ) {
				showProgress( true );
				showMessage( 'Panorama OK. Loading and composing tiles...' );
			}

			loader.onNoPanoramaData = function( status ) {
				showError("Could not retrieve panorama for the following reason: " + status);
			}

			loader.onPanoramaLoad = function() {
				activeLocation = this.location;
				mesh.material.uniforms.map.value = new THREE.Texture( this.canvas[ 0 ] );
				mesh.material.uniforms.map.value.needsUpdate = true;
				showMessage( 'Panorama tiles loaded.<br/>The images are ' + this.copyright );
				showProgress( false );
			};

			setZoom( 4 );
			addMarker( myLatlng ); // initial position (thanks mrdoob!)
			animate();

			request = {
			    placeId: 'ChIJN1t_tDeuEmsRUsoyG83frY4'
			};

            @{
                if (ViewBag.Place_Id != null) {
                    <text>  request = { placeId: '@ViewBag.Place_Id' };  </text>
                }
            }


			service = new google.maps.places.PlacesService(document.createElement('div'));
			service.getDetails(request, callback);

		}

        var service,request;
        function callback(place, status) {
            if (status == google.maps.places.PlacesServiceStatus.OK) {

                console.log(place.photos.length);
                for(var j=0, len =  place.photos.length ; j <len ;j++ ){
                   $("#content2").append("<img src=\"" + place.photos[j].getUrl({ 'maxWidth': 300, 'maxHeight': 200 })  + "\"></img>");

                }

                for(var k=0, len =  place.reviews.length ; k <len ;k++ ){
                    $("#content3").append("<p>" + place.reviews[k].text  + "</p>");

                }
                //after callback
                $("#content2").children().hide();
                $("#content3").children().hide();
            }
        }

		window.addEventListener( 'load', initialize, false );

		function findAddress( address ) {

			showMessage( 'Getting coordinates...' );
			geocoder.geocode( { 'address': address}, function(results, status) {
				if (status == google.maps.GeocoderStatus.OK) {
					map.setCenter(results[0].geometry.location);
					showMessage( 'Address found.' );
					addMarker( results[0].geometry.location ); // move to position (thanks jocabola!)
				} else {
					showError("Geocode was not successful for the following reason: " + status);
					showProgress( false );
				}
			});
		}

		function showError( message ) {
			errorDiv.innerHTML = message;
		}

		function showMessage( message ) {
			showError('');
			messageDiv.innerHTML = message;
		}

		function onWindowResized( event ) {
			renderer.setSize( container.clientWidth, container.clientHeight );
			camera.projectionMatrix.makePerspective( fov, window.innerWidth / window.innerHeight, camera.near, camera.far );
		}

		var isUserInteracting = false;
		var onPointerDownPointerX, onPointerDownPointerY, onPointerDownLon, onPointerDownLat;

		function onContainerMouseDown( event ) {

			event.preventDefault();

			isUserInteracting = true;
			var el = document.querySelectorAll( '.hide' );
			for( var j = 0; j < el.length; j++ ) {
				el[ j ].style.opacity = 0;
				el[ j ].style.pointerEvents = 'none';
			}

			onPointerDownPointerX = event.clientX;
			onPointerDownPointerY = event.clientY;

			onPointerDownLon = lon;
			onPointerDownLat = lat;

		}

		function onContainerMouseMove( event ) {

			event.preventDefault();

			var lookSpeed = .15;
			var f = fov / 500;
			if( navigator.pointer && navigator.pointer.isLocked ) {
				nLon = event.webkitMovementX * f;
				nLat += event.webkitMovementY * f;
			} else if ( document.mozPointerLockElement == container ){
				if( Math.abs( event.mozMovementX ) < 100 || Math.abs( event.mozMovementY ) < 100 ) {
					nLon = event.mozMovementX * f;
					nLat -= event.mozMovementY * f;
				}
			} else {
				if ( isUserInteracting ) {
					var dx = ( onPointerDownPointerX - event.clientX ) * f;
					var dy = ( event.clientY - onPointerDownPointerY ) * f;
					nLon = dx + onPointerDownLon; // reversed dragging direction (thanks mrdoob!)
					nLat = dy + onPointerDownLat;
				}
			}
		}

		function onContainerMouseWheel( event ) {

			event = event ? event : window.event;
			nFov = fov - ( event.detail ? event.detail * -5 : event.wheelDelta / 8 );

		}

		function onTouchStart( event ) {

			isUserInteracting = true;
			var el = document.querySelectorAll( '.hide' );
			for( var j = 0; j < el.length; j++ ) {
				el[ j ].style.opacity = 0;
				el[ j ].style.pointerEvents = 'none';
			}

			if( event.touches.length == 2 ) {

				var t = event.touches;
				oDist = Math.sqrt(
						Math.pow( t[ 0 ].clientX - t[ 1 ].clientX, 2 ) +
						Math.pow( t[ 0 ].clientY - t[ 1 ].clientY, 2 ) );
				oFov = nfov;

				isUserPinching = true;

			} else {

			  var t = event.touches[ 0 ];

			  onPointerDownPointerX = t.clientX;
			  onPointerDownPointerY = t.clientY;

			  onPointerDownLon = lon;
			  onPointerDownLat = lat;

			}

		  event.preventDefault();

		}

		function onTouchMove( event ) {

			if( event.touches.length == 2 ) {

				var t = event.touches;
				var dist = Math.sqrt(
				Math.pow( t[ 0 ].clientX - t[ 1 ].clientX, 2 ) +
				Math.pow( t[ 0 ].clientY - t[ 1 ].clientY, 2 ) );

				nFov = oFov + .1 * ( oDist - dist );

			} else {

			  var t = event.touches[ 0 ];
			  nLon = - .1 * ( t.clientX - onPointerDownPointerX ) + onPointerDownLon;
			  nLat = .1 * ( t.clientY - onPointerDownPointerY ) + onPointerDownLat;

			 }

		  event.preventDefault();

		}

		function onTouchEnd( event ) {

			event.preventDefault();
			isUserInteracting = false;
			var el = document.querySelectorAll( '.hide' );
			for( var j = 0; j < el.length; j++ ) {
				el[ j ].style.opacity = 1;
				el[ j ].style.pointerEvents = 'auto';
			}

		}

		function update() {
		}

		function onContainerMouseUp( event ) {

			event.preventDefault();
			isUserInteracting = false;
			var el = document.querySelectorAll( '.hide' );
			for( var j = 0; j < el.length; j++ ) {
				el[ j ].style.opacity = 1;
				el[ j ].style.pointerEvents = 'auto';
			}

		}

		function addMarker(location) {
			if( marker ) marker.setMap( null );
			marker = new google.maps.Marker({
				position: location,
				map: map
			});
			marker.setMap( map );
			showMessage( 'Loading panorama for zoom ' + zoom + '...' );
			loader.load( location );
		}

		var panoramas = [];
		var circle = null;
		var copyright;

		function animate() {

			requestAnimationFrame( animate );
			render();

		}

		var ellapsedTime, ellapsedFactor, phi, theta;

		function render() {

			var cd = new Date();
			var ctime = cd.getTime();

			ellapsedTime = ( ctime - time );
			ellapsedFactor = ellapsedTime / 16;

			var s = .15 * ellapsedFactor;
			lon += ( nLon - lon ) * s;
			lat += ( nLat - lat ) * s;
			fov += ( nFov - fov ) * s;

			camera.fov = fov;
			camera.updateProjectionMatrix();

			lat = Math.max( - 85, Math.min( 85, lat ) );
			phi = ( 90 - lat ) * Math.PI / 180;
			theta = lon * Math.PI / 180;

			camera.target.x = 500 * Math.sin( phi ) * Math.cos( theta );
			camera.target.y = 500 * Math.cos( phi );
			camera.target.z = 500 * Math.sin( phi ) * Math.sin( theta );
			camera.lookAt( camera.target );

			renderer.render( scene, camera );

			time = ctime;

		}

		var jj=2;
		function hideMap(){
            if(jj%2==0)
                $("#map").hide();
            else
                $("#map").show();
            jj++;
		}



    </script>





